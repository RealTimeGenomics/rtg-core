/*
 * Copyright (c) 2014. Real Time Genomics Limited.
 *
 * Use of this source code is bound by the Real Time Genomics Limited Software Licence Agreement
 * for Academic Non-commercial Research Purposes only.
 *
 * If you did not receive a license accompanying this file, a copy must first be obtained by email
 * from support@realtimegenomics.com.  On downloading, using and/or continuing to use this source
 * code you accept the terms of that license agreement and any amendments to those terms that may
 * be made from time to time by Real Time Genomics Limited.
 */
package com.rtg.protein;

import java.io.File;
import java.io.IOException;

import com.rtg.launcher.AbstractCli;
import com.rtg.launcher.AbstractCliTest;
import com.rtg.mode.DnaUtils;
import com.rtg.reader.ReaderTestUtils;
import com.rtg.util.InvalidParamsException;
import com.rtg.util.StringUtils;
import com.rtg.util.TestUtils;
import com.rtg.util.diagnostic.Diagnostic;
import com.rtg.util.io.FileUtils;
import com.rtg.util.io.MemoryPrintStream;
import com.rtg.util.test.FileHelper;

/**
 */
public class MapxRenameTest extends AbstractCliTest {

  @Override
  protected AbstractCli getCli() {
    return new MapxRename();
  }

  /**
   * Test of mainInit method.
   * @throws IOException if an IO error occurs
   */
  public void testFlags() throws IOException {
    final File tempDir = FileHelper.createTempDirectory();
    try {
      checkHandleFlagsErr();
      final File mapxfile = new File(tempDir, "somemapxfile");
      checkHandleFlagsErr(mapxfile.getAbsolutePath());
    } finally {
      assertTrue(FileHelper.deleteAll(tempDir));
    }
  }

  /**
   * Test of usage message
   */
  public void testUsage() {
    checkHelp("Replaces read identifiers (read-id field) in a mapx file generated by the RTG mapx command with the sequence identifiers from the original sequence file.",
              "SDF for the reads in the mapx file",
              "input mapx file",
              "print help on command-line flag usage",
              "renamed output mapx file");
  }

  private static final String LS = StringUtils.LS;
  private static final String TB = "\t";
  private static final String MAPX = ""
    + ProteinOutputProcessor.MAPX_OUTPUT_VERSION_HEADER + "\t" + ProteinOutputProcessor.MAPX_OUTPUT_VERSION + LS
    + "#template-name" + TB + "frame" + TB + "read-id" + TB + "template-start" + TB + "template-end" + TB + "template-length" + TB + "read-start" + TB + "read-end" + TB + "read-length" + TB + "template-protein" + TB + "read-protein" + TB + "alignment" + TB + "identical" + TB + "%identical" + TB + "positive" + TB + "%positive" + TB + "mismatches" + TB + "raw-score" + TB + "bit-score" + TB + "e-score" + LS
    + "simulatedSequence1+1" + TB + "-3" + TB + "0" + TB + "9" + TB + "30" + TB + "3333" + TB + "3" + TB + "68" + TB + "70" + TB + "p*wnrc**gpgyektr*tt*sr" + TB + "p*wnrc**gpgyektr*tt*sr" + TB + "p*wnrc**gpgyektr*tt*sr" + TB + "22" + TB + "100" + TB + "22" + TB + "100" + TB + "0" + TB + "-108" + TB + "46.2" + TB + "2.5e-10" + LS
    + "simulatedSequence1+1" + TB + "-3" + TB + "0" + TB + "9" + TB + "30" + TB + "3333" + TB + "3" + TB + "68" + TB + "70" + TB + "p*wnrc**gpgyektr*tt*sr" + TB + "p*wnrc**gpgyektr*tt*st" + TB + "p*wnrc**gpgyektr*tt*s " + TB + "21" + TB + "95" + TB + "21" + TB + "95" + TB + "1" + TB + "-102" + TB + "43.9" + TB + "1.2e-9" + LS
    + "simulatedSequence1+1" + TB + "-1" + TB + "0" + TB + "10" + TB + "32" + TB + "3333" + TB + "2" + TB + "70" + TB + "70" + TB + "*wnrc**gpgyektr*tt*srew" + TB + "vesmlmrtrvtektr*tt*srew" + TB + "  +        ektr*tt*srew" + TB + "12" + TB + "52" + TB + "13" + TB + "57" + TB + "10" + TB + "-32" + TB + "16.9" + TB + "1.6e-1" + LS
    + "simulatedSequence1+1" + TB + "+1" + TB + "0" + TB + "17" + TB + "33" + TB + "3333" + TB + "1" + TB + "69" + TB + "70" + TB + "g------pgyektr*tt*srewl" + TB + "gidanedqgtektr*tt*srewl" + TB + "g       g ektr*tt*srewl" + TB + "15" + TB + "65" + TB + "15" + TB + "65" + TB + "8" + TB + "-54" + TB + "25.4" + TB + "4.5e-4" + LS
    + "simulatedSequence1+1" + TB + "+2" + TB + "0" + TB + "12" + TB + "34" + TB + "3333" + TB + "2" + TB + "70" + TB + "70" + TB + "nrc**gpgyektr*tt*srewlp" + TB + "nrc**gpgyektr*tt*srewlp" + TB + "nrc**gpgyektr*tt*srewlp" + TB + "23" + TB + "100" + TB + "23" + TB + "100" + TB + "0" + TB + "-116" + TB + "49.3" + TB + "2.9e-11" + LS
    + "simulatedSequence1+1" + TB + "+2" + TB + "0" + TB + "19" + TB + "41" + TB + "3333" + TB + "2" + TB + "70" + TB + "70" + TB + "gyektr*tt*srewlplpdgsph" + TB + "gyektr*tt*srewlplpdgsph" + TB + "gyektr*tt*srewlplpdgsph" + TB + "23" + TB + "100" + TB + "23" + TB + "100" + TB + "0" + TB + "-123" + TB + "52.0" + TB + "4.5e-12" + LS
    + "simulatedSequence1+1" + TB + "+1" + TB + "0" + TB + "22" + TB + "44" + TB + "3333" + TB + "1" + TB + "69" + TB + "70" + TB + "ktr*tt*srewlplpdgsphg*q" + TB + "ktr*tt*srewlplpdasphg*q" + TB + "ktr*tt*srewlplpd sphg*q" + TB + "22" + TB + "96" + TB + "22" + TB + "96" + TB + "1" + TB + "-111" + TB + "47.4" + TB + "1.1e-10" + LS
    ;

  /** Test for an error that will be picked up during params object construction. */
  public void checkParamsError(final String[] args0, final String exp) throws InvalidParamsException {
    TestUtils.containsAll(checkHandleFlagsErr(args0), exp);
  }

  // commandline errors
  public void testCliError1() throws InvalidParamsException, IOException {
    checkParamsError(new String[] {"notexists"}, "You must provide a value for -i SDF");
  }

  // commandline errors
  public void testCliError2() throws InvalidParamsException, IOException {
    final File temp = FileUtils.createTempDir("mapxrenametest", "reads");

    try {
      final File readsDir = new File(temp, "reads");

      ReaderTestUtils.getReaderDNA(">r1" + LS + "acgt", readsDir, null).close();
      checkParamsError(new String[] {"notexists", "-i", readsDir.getPath()}, "Input file \"notexists\" doesn't exist");
      final File map = new File(temp, "map");
      FileUtils.stringToFile(MAPX, map);
      checkParamsError(new String[] {map.getPath(), "-i", "notexists2"}, "The specified SDF, \"notexists2\", does not exist.");

      checkParamsError(new String[] {map.getPath(), "-i", map.getPath()}, "The specified file, \"" + map.getAbsolutePath() + "\", is not an SDF.");
    } finally {
      assertTrue(FileHelper.deleteAll(temp));
    }
  }

  // commandline errors
  public void testCliError3() throws InvalidParamsException, IOException {
    final File readsDir = FileUtils.createTempDir("mapxrenametest", "reads");
    ReaderTestUtils.getReaderDNA(">r1" + LS + "acgt", readsDir, null).close();
    final File tempDir = FileUtils.createTempDir("mapxrenametest", "checkparamserror");
    try {
      final File map = new File(tempDir, "map");
      FileUtils.stringToFile(MAPX, map);
      final File mapRename = new File(tempDir, "map_rename");
      String[] args = {map.getPath(), "-i", readsDir.getPath(),
          "-o", mapRename.getPath()};
      checkMainInitWarn(args);
      assertTrue(mapRename.exists());
    } finally {
      assertTrue(FileHelper.deleteAll(readsDir));
      assertTrue(FileHelper.deleteAll(tempDir));
    }
  }

  // commandline errors
  public void testCliError3b() throws InvalidParamsException, IOException {
    final File readsDir = FileUtils.createTempDir("mapxrenametest", "reads");
    ReaderTestUtils.getReaderDNA(">r1" + LS + "acgt", readsDir, null).close();
    final File tempDir = FileUtils.createTempDir("mapxrenametest", "checkparamserror");
    try {
      final File map = new File(tempDir, "map");
      FileUtils.stringToFile(MAPX, map);
      final File mapRename = new File(tempDir, "map_rename");
      String[] args = {map.getPath(), "-i", readsDir.getPath(),
          "--output", mapRename.getPath()};
      checkMainInitWarn(args);
      assertTrue(mapRename.exists());
    } finally {
      assertTrue(FileHelper.deleteAll(readsDir));
      assertTrue(FileHelper.deleteAll(tempDir));
    }
  }

  public void testCliError4() throws InvalidParamsException, IOException {
    final File readsDir = FileUtils.createTempDir("mapxrenametest", "reads");
    ReaderTestUtils.getReaderDNA(">r1" + LS + "acgt", readsDir, null).close();
    final File tempDir = FileUtils.createTempDir("mapxrenametest", "checkparamserror");
    try {
      final File map = new File(tempDir, "map.tsv");
      FileUtils.stringToFile(MAPX, map);
      String[] args = {map.getPath(), "-i", readsDir.getPath()};
      checkMainInitWarn(args);
      final File mapRename = new File(tempDir, "map_rename.tsv");
      assertTrue(mapRename.exists());
    } finally {
      assertTrue(FileHelper.deleteAll(readsDir));
      assertTrue(FileHelper.deleteAll(tempDir));
    }
  }

  public void testCliError4Gzipped() throws InvalidParamsException, IOException {
    final File readsDir = FileUtils.createTempDir("mapxrenametest", "reads");
    ReaderTestUtils.getReaderDNA(">r1" + LS + "acgt", readsDir, null).close();
    final File tempDir = FileUtils.createTempDir("mapxrenametest", "checkparamserror");
    try {
      final File map = new File(tempDir, "map.tsv.gz");
      FileHelper.stringToGzFile(MAPX, map);

      String[] args = {map.getPath(), "-i", readsDir.getPath()};
      checkMainInitWarn(args);
      final File mapRename = new File(tempDir, "map_rename.tsv.gz");
      assertTrue(mapRename.exists());
    } finally {
      assertTrue(FileHelper.deleteAll(readsDir));
      assertTrue(FileHelper.deleteAll(tempDir));
    }
  }

  private static final String[] READS = {
    "TGGCG" + "ACG" + "CAAAAACAGAAAGTCGAAAAAAAATCAA",
    "AATGGCGCAAAAACAGAAAGTCATGGAAAAAAAATC",
    "ATGGCGCAAAAACACGCGAAAGTCGAAAAAAAATCA",
    "TGGCGCAAAAACAGAAAGTCGAAATTTAAAAATCAA",
    DnaUtils.reverseComplement("AAATGGCGCAAAAAACCCAGAAAGTCGAAAAAAAAT"),
    DnaUtils.reverseComplement("AATGGCGCAAAAACAGAAAGTTGACGAAAAAAAATC"),
    DnaUtils.reverseComplement("ATGGCGCAAAAACAGAAAGTCGGGGAAAAAAAATCA"),
    DnaUtils.reverseComplement("TGGCGCAAAAACAGAAAGTCGACACAAAATCACGAA"),
  "AAAAAAATCAAAGAAATTATAACCACGACAAAGCAG"};

  static final String READS_FASTA;
  static {
    StringBuilder sb = new StringBuilder();
    for (int i = 0; i < READS.length; i++) {
      sb.append(">testRead").append(i).append(LS).append(READS[i]).append(LS);
    }
    READS_FASTA = sb.toString();
  }

  public void testRename() throws Exception {
    final MemoryPrintStream mps = new MemoryPrintStream();
    Diagnostic.setLogStream(mps.printStream());
    final File tempDir = FileUtils.createTempDir("mapxrename", "test");
    try {
      final File reads = new File(tempDir, "reads");
      ReaderTestUtils.getReaderDNA(READS_FASTA, reads, null).close();
      final File mapped = FileHelper.resourceToFile("com/rtg/protein/resources/mapped.tsv", new File(tempDir, "mapped.tsv"));
      checkMainInitWarn("-i", reads.getAbsolutePath(), mapped.getAbsolutePath());
      final File unmapped = FileHelper.resourceToFile("com/rtg/protein/resources/unmapped.tsv", new File(tempDir, "unmapped.tsv"));

      final String warn = checkMainInitWarn("-i", reads.getAbsolutePath(), unmapped.getAbsolutePath());
      String actual = FileUtils.fileToString(new File(tempDir, "mapped_rename.tsv"));
      TestUtils.sameLines(FileHelper.resourceToString("com/rtg/protein/resources/mapped_rename.tsv"),
        actual.substring(actual.indexOf("#template-name")), false);
      String actualUn = FileUtils.fileToString(new File(tempDir, "unmapped_rename.tsv"));
      TestUtils.sameLines(FileHelper.resourceToString("com/rtg/protein/resources/unmapped_rename.tsv"),
        actualUn.substring(actualUn.indexOf("#read-name")), false);

      assertEquals("No READ-SDF-ID found in mapx header, unable to verify read-id correctness." + LS, warn);

    } finally {
      mps.printStream().close();
      Diagnostic.setLogStream();
      FileHelper.deleteAll(tempDir);
    }
  }

  private void checkHeaderErrors(final String data, final String expected) throws Exception {
    final File tempDir = FileUtils.createTempDir("mapxrename", "test");
    try {
      final File out = new File(tempDir, "mapx.out");
      FileUtils.stringToFile(data, out);
      final File reads = new File(tempDir, "reads");
      ReaderTestUtils.getReaderDNA(READS_FASTA, reads, null).close();
      final String res = checkMainInitBadFlags("-i", reads.getAbsolutePath(), out.getAbsolutePath());
      assertEquals("Error: " + expected, res);
    } finally {
      FileHelper.deleteAll(tempDir);
    }
  }

  public void testWrongHeaderInFileExeption() throws Exception {
    checkHeaderErrors("ABCD" + LS + MAPX, "An IO problem occurred: \"Unexpected line encountered in header: ABCD\"" + LS);
  }

  public void testAlreadyRenamedFileExeption() throws Exception {
    final String header = "#template-name" + TB + "frame" + TB + "read-name" + TB + "template-start" + TB + "template-end" + TB + "template-length" + TB + "read-start" + TB + "read-end" + TB + "read-length" + TB + "template-protein" + TB + "read-protein" + TB + "alignment" + TB + "identical" + TB + "%identical" + TB + "positive" + TB + "%positive" + TB + "mismatches" + TB + "raw-score" + TB + "bit-score" + TB + "e-score" + LS;
    checkHeaderErrors(header + LS, "This file has already been renamed" + LS);
  }

  public void testAdvanceHeader() throws Exception {
    final String header = ProteinOutputProcessor.MAPX_OUTPUT_VERSION_HEADER + "\t" + ProteinOutputProcessor.MAPX_OUTPUT_VERSION + "x";
    checkHeaderErrors(header + LS, "An IO problem occurred: \"Unsupported mapx output format: #MAPX output" + "\tv2.0x\"" + LS);

    final String header2 = ProteinOutputProcessor.MAPX_OUTPUT_VERSION_HEADER + "\t" + ProteinOutputProcessor.MAPX_OUTPUT_VERSION + "\tx";
    checkHeaderErrors(header2 + LS, "An IO problem occurred: \"Unsupported mapx output format: #MAPX output" + "\tv2.0\tx\"" + LS);
  }

  public void testemptyFile() throws Exception {
    final String header = "";
    checkHeaderErrors(header + LS, "An IO problem occurred: \"Unexpected end of file while reading header\"" + LS);
  }
}
