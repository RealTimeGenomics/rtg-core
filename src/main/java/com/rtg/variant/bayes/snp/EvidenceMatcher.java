/*
 * Copyright (c) 2018. Real Time Genomics Limited.
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.rtg.variant.bayes.snp;

import com.rtg.util.StringUtils;
import com.rtg.variant.bayes.EvidenceAcceptor;
import com.rtg.variant.bayes.EvidenceInterface;

/**
 * Submits Evidence obtained from matching to an EvidenceAcceptor.
 * @param <D> Type of description that will be Generated by factories
 */
public class EvidenceMatcher<D extends EvidenceAcceptor> implements MatcherInterface {

  private final ReferenceBasedBuffer<D> mBuffer;
  private final CachedEvidenceFactory mCachedEvidenceFactory;

  /**
   * Construct a new evidence matcher.
   * @param buffer manages per-position <code>EvidenceAcceptor</code> s
   * @param evidenceFactory factory for retrieving cached evidence objects
   */
  public EvidenceMatcher(final ReferenceBasedBuffer<D> buffer, CachedEvidenceFactory evidenceFactory) {
    mBuffer = buffer;
    mCachedEvidenceFactory = evidenceFactory;
  }

  @Override
  public void match(int refPosition, int readBasesLeft, int readBasesRight, int readNt, int mapQ, int phred, int stateIndex) {
    if (readNt > 0) {
      final EvidenceInterface ev = mCachedEvidenceFactory.evidence(readNt - 1, readBasesLeft, readBasesRight, mapQ, phred, stateIndex, 0, false);
      match(refPosition, ev);
    }
  }

  @Override
  public void match(int refPosition, EvidenceInterface evid) {
    final D acceptor = mBuffer.get(refPosition);
    if (acceptor != null) {
      acceptor.increment(evid);
    }
  }

  @Override
  public void unmapped(int refPosition) {
    final EvidenceInterface ev = mCachedEvidenceFactory.evidence(0, 0, 0, 0, 0, 0, 0, true);
    match(refPosition, ev);
  }

  @Override
  public int getStateIndex(boolean isForward, boolean isReadPaired, boolean isFirst, boolean isMated) {
    return mCachedEvidenceFactory.getStateIndex(isForward, isReadPaired, isFirst, isMated);
  }

  /**
   * Return the EvidenceAcceptor for the current position and move to the next
   * position.
   *
   * @param ref position in reference
   * @return the <code>EvidenceAcceptor</code>
   */
  public D step(final int ref) {
    if (ref != mBuffer.base()) {
      throw new IllegalStateException("ref=" + ref + " != base=" + mBuffer.base());
    }
    return mBuffer.step();
  }

  @Override
  public String toString() {
    return "Matcher:" + StringUtils.LS + mBuffer;
  }
}
