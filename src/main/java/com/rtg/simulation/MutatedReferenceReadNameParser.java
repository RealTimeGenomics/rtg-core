/*
 * Copyright (c) 2018. Real Time Genomics Limited.
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package com.rtg.simulation;

import com.rtg.util.Pair;

/**
 * Parses names generated by the new read simulator and adjusts
 * for mutations in reference loaded from phased VCF file.
 */
public class MutatedReferenceReadNameParser implements SimulatedReadNameParser {

  final MutatedSampleOffsets mOffsets;
  final SimulatedReadNameParser mInner;

  /**
   * Constructor for mutated read name parser.
   * @param inner the delegate parser
   * @param offsets the offsets for the sample being used.
   */
  public MutatedReferenceReadNameParser(SimulatedReadNameParser inner, MutatedSampleOffsets offsets) {
    mOffsets = offsets;
    mInner = inner;
  }

  @Override
  public boolean setReadInfo(String readName, int readLength) {
    return mInner.setReadInfo(readName, readLength);
  }

  @Override
  public String templateName() {
    final String name = mInner.templateName();
    if (name.endsWith("_0") || name.endsWith("_1")) {
      return name.substring(0, name.length() - 2);
    }
    return name;
  }

  @Override
  public long templatePosition() {
    final int pos = (int) mInner.templatePosition();
    final Pair<MutatedOffsets, MutatedOffsets> offsets = mOffsets.get(templateName());
    if (offsets != null) {
      if (mInner.templateName().endsWith("_1")) {
        return offsets.getB().getOffsetPosition(pos);
      } else {
        return offsets.getA().getOffsetPosition(pos);
      }
    }
    return pos;
  }

  @Override
  public int templateSet() {
    return mInner.templateSet();
  }

  @Override
  public boolean forwardFrame() {
    return mInner.forwardFrame();
  }

  @Override
  public int readId() {
    return mInner.readId();
  }

  @Override
  public String readName() {
    return mInner.readName();
  }

  @Override
  public int substitutions() {
    return mInner.substitutions();
  }

  @Override
  public int insertions() {
    return mInner.insertions();
  }

  @Override
  public int deletions() {
    return mInner.deletions();
  }

  @Override
  public int numMismatches() {
    return mInner.numMismatches();
  }

  @Override
  public boolean isChimera() {
    return mInner.isChimera();
  }

  @Override
  public boolean isDuplicate() {
    return mInner.isDuplicate();
  }

}
