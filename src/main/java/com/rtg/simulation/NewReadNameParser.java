/*
 * Copyright (c) 2018. Real Time Genomics Limited.
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the
 *    distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package com.rtg.simulation;

import com.rtg.sam.SamUtils;
import com.rtg.util.StringUtils;


/**
 * Parses names generated by the new read simulator. This has now been superceded.
 */
public class NewReadNameParser implements SimulatedReadNameParser {

  static final char READ_SIM_SEPARATOR = '/';
  static final int EXPECT_FIELDS = 7;

  /** Index of the read label field. */
  public static final int READ_LABEL = 0;
  /** Index of the template set id field. */
  public static final int TEMPLATE_SET_ID = 1;
  /** Index of the template sequence id field. */
  public static final int TEMPLATE_SEQ_NAME = 3;
  /** Index of the template position field. */
  public static final int TEMPLATE_POS_ID = 4;
  /** Index of the read frame field. */
  public static final int READ_FRAME_ID = 5;
  /** Index of the read cigar field. */
  public static final int READ_CIGAR_ID = 6;

  /**
   * @param readName an example read name
   * @return true if this read name looks like something this parser deals with
   */
  public static boolean looksOk(String readName) {
    if (readName.indexOf(READ_SIM_SEPARATOR) != -1) {
      final String[] f = StringUtils.split(readName, READ_SIM_SEPARATOR);
      if ((f.length == EXPECT_FIELDS - 1) && f[0].contains(" ")) {
        return true;
      }
      if ((f.length == EXPECT_FIELDS) && !f[0].contains(" ")) {
        return true;
      }
    }
    return false;
  }



  protected String mReadName = null;
  protected int mTemplateSet;
  protected String mTemplateName = null;
  protected long mTemplatePos;
  protected boolean mForwardFrame;
  protected String mCigar = null;
  protected int mSubs;
  protected int mIns;
  protected int mDel;
  protected int mId;

  @Override
  public boolean setReadInfo(String readName, int readLength) {
    final String[] fields = StringUtils.split(readName.replace(' ', '/'), READ_SIM_SEPARATOR);
    if (fields.length < EXPECT_FIELDS) {
      return false;
    }
    mReadName = fields[READ_LABEL];
    mId = Integer.parseInt(mReadName.replaceAll("read", "").replaceAll("dupe-", "").replaceAll("chimera", ""));
    mTemplateSet = Integer.parseInt(fields[TEMPLATE_SET_ID]);
    mTemplateName = fields[TEMPLATE_SEQ_NAME];
    mTemplatePos = Long.parseLong(fields[TEMPLATE_POS_ID]);
    mForwardFrame = "F".equals(fields[READ_FRAME_ID]);
    mCigar = fields[READ_CIGAR_ID].replaceAll("\\.", "=");
    // Scan cigar to count ins/sub/dels
    final String cigar = fields[READ_CIGAR_ID];
    mSubs = 0;
    mIns = 0;
    mDel = 0;
    int opcount = 0;
    for (int i = 0; i < cigar.length(); ++i) {
      final char c = cigar.charAt(i);
      if (c >= '0' && c <= '9') {
        opcount = opcount * 10 + (c - '0');
      } else {
        if (c == SamUtils.CIGAR_INSERTION_INTO_REF) {
          mIns += opcount;
        } else if (c == SamUtils.CIGAR_DELETION_FROM_REF) {
          mDel += opcount;
        } else if (c == SamUtils.CIGAR_MISMATCH) {
          mSubs += opcount;
        }
        opcount = 0;
      }
    }
    return true;
  }

  @Override
  public boolean isChimera() {
    return readName().startsWith("chimera");
  }

  @Override
  public boolean isDuplicate() {
    return readName().startsWith("dupe");
  }

  @Override
  public long templatePosition() {
    return mTemplatePos;
  }

  @Override
  public String templateName() {
    return mTemplateName;
  }

  @Override
  public int templateSet() {
    return mTemplateSet;
  }

  @Override
  public boolean forwardFrame() {
    return mForwardFrame;
  }

  @Override
  public int readId() {
    return mId;
  }

  @Override
  public String readName() {
    return mReadName;
  }

  @Override
  public int substitutions() {
    return mSubs;
  }

  @Override
  public int insertions() {
    return mIns;
  }

  @Override
  public int deletions() {
    return mDel;
  }

  @Override
  public int numMismatches() {
    return mSubs + mIns + mDel;
  }

  /**
   * @return SAM compatible CIGAR representation string from read name
   */
  public String cigar() {
    return mCigar;
  }

}
