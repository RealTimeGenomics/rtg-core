/*
 * Copyright (c) 2014. Real Time Genomics Limited.
 *
 * Use of this source code is bound by the Real Time Genomics Limited Software Licence Agreement
 * for Academic Non-commercial Research Purposes only.
 *
 * If you did not receive a license accompanying this file, a copy must first be obtained by email
 * from support@realtimegenomics.com.  On downloading, using and/or continuing to use this source
 * code you accept the terms of that license agreement and any amendments to those terms that may
 * be made from time to time by Real Time Genomics Limited.
 */

package com.rtg.simulation;

import com.rtg.util.Pair;

/**
 * Parses names generated by the new read simulator and adjusts
 * for mutations in reference loaded from phased VCF file.
 */
public class MutatedReferenceReadNameParser implements SimulatedReadNameParser {

  final MutatedSampleOffsets mOffsets;
  final SimulatedReadNameParser mInner;

  /**
   * Constructor for mutated read name parser.
   * @param inner the delegate parser
   * @param offsets the offsets for the sample being used.
   */
  public MutatedReferenceReadNameParser(SimulatedReadNameParser inner, MutatedSampleOffsets offsets) {
    mOffsets = offsets;
    mInner = inner;
  }

  @Override
  public boolean setReadInfo(String readName, int readLength) {
    return mInner.setReadInfo(readName, readLength);
  }

  @Override
  public String templateName() {
    final String name = mInner.templateName();
    if (name.endsWith("_0") || name.endsWith("_1")) {
      return name.substring(0, name.length() - 2);
    }
    return name;
  }

  @Override
  public long templatePosition() {
    final int pos = (int) mInner.templatePosition();
    final Pair<MutatedOffsets, MutatedOffsets> offsets = mOffsets.get(templateName());
    if (offsets != null) {
      if (mInner.templateName().endsWith("_1")) {
        return offsets.getB().getOffsetPosition(pos);
      } else {
        return offsets.getA().getOffsetPosition(pos);
      }
    }
    return pos;
  }

  @Override
  public int templateSet() {
    return mInner.templateSet();
  }

  @Override
  public boolean forwardFrame() {
    return mInner.forwardFrame();
  }

  @Override
  public int readId() {
    return mInner.readId();
  }

  @Override
  public String readName() {
    return mInner.readName();
  }

  @Override
  public int substitutions() {
    return mInner.substitutions();
  }

  @Override
  public int insertions() {
    return mInner.insertions();
  }

  @Override
  public int deletions() {
    return mInner.deletions();
  }

  @Override
  public int numMismatches() {
    return mInner.numMismatches();
  }

  @Override
  public boolean isChimera() {
    return mInner.isChimera();
  }

  @Override
  public boolean isDuplicate() {
    return mInner.isDuplicate();
  }

}
