/*
 * Copyright (c) 2014. Real Time Genomics Limited.
 *
 * Use of this source code is bound by the Real Time Genomics Limited Software Licence Agreement
 * for Academic Non-commercial Research Purposes only.
 *
 * If you did not receive a license accompanying this file, a copy must first be obtained by email
 * from support@realtimegenomics.com.  On downloading, using and/or continuing to use this source
 * code you accept the terms of that license agreement and any amendments to those terms that may
 * be made from time to time by Real Time Genomics Limited.
 */
package com.rtg.simulation;

import com.rtg.sam.SamUtils;
import com.rtg.util.StringUtils;


/**
 * Parses names generated by the new read simulator, which sets the read ID as the read name
 * and the rest of the read mutation information after the first space.
 */
public class NewestReadNameParser extends NewReadNameParser {

  static final char READ_SIM_SEPARATOR = '/';
  static final int EXPECT_FIELDS = 7;

  /** Index of the read label field. */
  public static final int READ_ID_READ_LABEL = 0;
  /** Index of the template set id field. */
  public static final int TEMPLATE_SET_ID = 1;
  /** Index of the template sequence id field. */
  public static final int TEMPLATE_SEQ_NAME = 3;
  /** Index of the template position field. */
  public static final int TEMPLATE_POS_ID = 4;
  /** Index of the read frame field. */
  public static final int READ_FRAME_ID = 5;
  /** Index of the read cigar field. */
  public static final int READ_CIGAR_ID = 6;

  /**
   * @param readName an example read name
   * @return true if this read name looks like something this parser deals with
   */
  public static boolean looksOk(String readName) {
    if (readName.indexOf(READ_SIM_SEPARATOR) != -1) {
      final String[] f = StringUtils.split(readName, READ_SIM_SEPARATOR);
      if ((f.length == EXPECT_FIELDS) && f[0].contains(" ")) {
        return true;
      }
    }
    return false;
  }


  @Override
  public boolean setReadInfo(String readName, int readLength) {
    final String[] fields = StringUtils.split(readName, READ_SIM_SEPARATOR);
    if (fields.length < EXPECT_FIELDS) {
      return false;
    }
    final String[] firstTwo = StringUtils.split(fields[READ_ID_READ_LABEL], ' ');
    if (firstTwo.length != 2) {
      return false;
    }
    mId = Integer.parseInt(firstTwo[0]);
    mReadName = firstTwo[1]; // fields[READ_LABEL];
    mTemplateSet = Integer.parseInt(fields[TEMPLATE_SET_ID]);
    mTemplateName = fields[TEMPLATE_SEQ_NAME];
    mTemplatePos = Long.parseLong(fields[TEMPLATE_POS_ID]);
    mForwardFrame = "F".equals(fields[READ_FRAME_ID]);
    mCigar = fields[READ_CIGAR_ID].replaceAll("\\.", "=");
    // Scan cigar to count ins/sub/dels
    final String cigar = fields[READ_CIGAR_ID];
    mSubs = 0;
    mIns = 0;
    mDel = 0;
    int opcount = 0;
    for (int i = 0; i < cigar.length(); ++i) {
      final char c = cigar.charAt(i);
      if (c >= '0' && c <= '9') {
        opcount = opcount * 10 + (c - '0');
      } else {
        if (c == SamUtils.CIGAR_INSERTION_INTO_REF) {
          mIns += opcount;
        } else if (c == SamUtils.CIGAR_DELETION_FROM_REF) {
          mDel += opcount;
        } else if (c == SamUtils.CIGAR_MISMATCH) {
          mSubs += opcount;
        }
        opcount = 0;
      }
    }
    return true;
  }

}
