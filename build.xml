<project name="public-core" default="compile-src">


  <dirname property="public.core.basedir" file="${ant.file.public-core}"/>
  <property name="src.dir" location="${public.core.basedir}/src"/>
  <property name="src.lib.dir" location="${public.core.basedir}/lib"/>
  <property name="test.dir" location="${public.core.basedir}/test"/>
  <property name="test.lib.dir" location="${public.core.basedir}/testLib"/>
  <property name="tools.dir" location="${public.core.basedir}/tools"/> <!-- Libraries supporting the build process itself -->

  <property name="dist.dir" location="${public.core.basedir}/dist"/>
  <property name="build.dir" location="${public.core.basedir}/build"/>

  <property name="build.src" location="${build.dir}/src"/>
  <property name="build.test" location="${build.dir}/test"/>
  <property name="build.junit" location="${build.dir}/junit"/>
  <property name="build.text" location="${build.dir}/text"/>
  <property name="build.misc" location="${build.dir}/misc"/>


  <property name="build.sysclasspath" value="ignore"/>
  <taskdef resource="net/sf/antcontrib/antcontrib.properties" />

  <property name="product" value="RTG Core Non-Commercial" />
  <property name="resources" value="core" />

  <property name="regression.update" value=""/> <!-- Empty means don't update nano-regression results -->

  <property name="htsjdk.jar" value="sam-1.128.jar"/> <!-- This must be build from the RTG fork of htsjdk -->

  <!-- These jars are needed at run time -->
  <fileset id="runtime.libs" dir="${src.lib.dir}">
    <include name="${htsjdk.jar}" />
    <include name="gzipfix.jar" />
    <include name="RPlot.jar" />
    <include name="Jama-1.0.3.jar" />
    <include name="velocity-1.7.jar" />
    <include name="velocity-tools-generic.jar" />
    <include name="commons-collections-3.2.1.jar" />
    <include name="commons-lang-2.4.jar" />
  </fileset>

  <path id="runtime.classpath">
    <pathelement path="${build.src}" />
    <pathelement path="${src.dir}" />
    <resources refid="runtime.libs" />
  </path>

  <!-- These jars are only needed at compile time -->
  <fileset id="compiletime.libs" dir="${src.lib.dir}">
    <include name="jumble-annotations.jar" />
    <include name="findbugs-annotations.jar" />
    <include name="findbugs-jsr305.jar" />
  </fileset>

  <!-- These jars are needed at test run time -->
  <fileset id="runtime.test.libs" dir="${test.lib.dir}" includes="*.jar"/>

  <union id="runtime.test.classpath">
    <resources refid="runtime.classpath"/>
    <path>
      <pathelement path="${build.test}" />
      <pathelement path="${test.dir}" />
      <resources refid="runtime.test.libs" />
    </path>
  </union>


  <target name="clean">
    <delete dir="${dist.dir}"/>
    <delete dir="${build.dir}"/>
  </target>

  <target name="init">
    <mkdir dir="${dist.dir}"/>
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.src}"/>
    <mkdir dir="${build.test}"/>
    <mkdir dir="${build.text}"/>
    <mkdir dir="${build.junit}"/>
    <mkdir dir="${build.misc}"/>
  </target>

  <property name="vcs.info.cmd" value="git"/>
  <property name="vcs.info.args" value="rev-list --abbrev-commit -n 1 HEAD"/>

  <target name="rtg-vcs-info" depends="init" unless="rtg.vcs.commit.revision">
    <exec executable="${vcs.info.cmd}" outputproperty="rtg.vcs.commit.revision" dir="${public.core.basedir}">
      <arg line="${vcs.info.args}"/>
    </exec>
    <echo message="Current build revision is ${rtg.vcs.commit.revision}"/>
  </target>


  <target name="compile-src" depends="init" description="Compiles all code in src.">
    <javac destdir="${build.src}" sourcepath="" debug="true">
      <src path="${src.dir}"/>
      <compilerarg value="-Xlint" />
      <compilerarg value="-Xlint:-serial" />
      <compilerarg value="-proc:none" />
      <classpath>
        <resources refid="runtime.libs"/>
        <resources refid="compiletime.libs"/>
      </classpath>
    </javac>
  </target>

  <target name="compile-test" depends="compile-src" description="Compiles all code in test.">
    <javac destdir="${build.test}" sourcepath="" debug="true">
      <src path="${test.dir}"/>
      <compilerarg value="-Xlint" />
      <compilerarg value="-Xlint:-serial" />
      <compilerarg value="-proc:none" />
      <classpath>
        <pathelement path="${build.src}"/>
        <resources refid="runtime.libs"/>
        <resources refid="compiletime.libs"/>
        <resources refid="runtime.test.libs" />
      </classpath>
    </javac>
  </target>

  <target name="compile" depends="compile-test" description="Compile all Java source code."/>

  <!--
       This definition puts a property value into a file, but only if it
       is different to the value that is already there, in order to
       prevent the triggering of expensive targets multiple times.
  -->
  <macrodef name="set-version-file">
    <attribute name="version.file"/>
    <attribute name="version.value"/>
    <sequential>
      <local name="old-version.value"/>
      <loadfile property="old-version.value" srcFile="@{version.file}" failonerror="false" quiet="true"/>
      <if>
        <not>
          <equals arg1="${old-version.value}" arg2="@{version.value}"/>
        </not>
        <then>
          <echo message="Setting @{version.file} to @{version.value}"/>
          <echo file="@{version.file}" message="@{version.value}"/>
        </then>
      </if>
    </sequential>
  </macrodef>

  <target name="set-rtg-build-version" depends="init,rtg-vcs-info">
    <set-version-file version.file="${build.src}/com/rtg/slim.version"
                      version.value="${rtg.vcs.commit.revision}"/>
    <tstamp> <format property="build.time" pattern="yyyy-MM-dd" /></tstamp>
    <set-version-file version.file="${build.src}/com/rtg/build.time"
                      version.value="${build.time}"/>
  </target>

  <target name="set-rtg-build-product">
    <set-version-file version.file="${build.misc}/com/rtg/product.name"
                      version.value="${product}"/>
  </target>

  <union id="jar-src">
    <fileset dir="${build.src}" />
    <fileset dir="${src.dir}"> <!-- Be careful not to include unneccessary stuff here -->
      <include name="com/**/*.properties"/>
      <include name="com/rtg/graph/**/*.png"/>
      <include name="com/rtg/variant/util/*.txt"/>
      <include name="com/rtg/mode/BLOSUM45" />
      <include name="com/rtg/mode/BLOSUM62" />
      <include name="com/rtg/mode/BLOSUM80" />
      <include name="com/rtg/report/resources/*"/>
      <include name="com/rtg/metagenomics/krona/resources/krona-2.0.js" />
      <include name="com/rtg/metagenomics/krona/resources/hidden.png" />
      <include name="com/rtg/metagenomics/krona/resources/loading.gif" />
    </fileset>
    <zipfileset src="${src.lib.dir}/${htsjdk.jar}" excludes="META-INF/**"/>
    <zipfileset src="${src.lib.dir}/Jama-1.0.3.jar" excludes="META-INF/**"/>

    <zipfileset src="${src.lib.dir}/velocity-1.7.jar" excludes="META-INF/**" />

    <zipfileset src="${src.lib.dir}/velocity-tools-generic.jar" excludes="META-INF/**" />
    <zipfileset src="${src.lib.dir}/commons-collections-3.2.1.jar" excludes="META-INF/**" />
    <zipfileset src="${src.lib.dir}/commons-lang-2.4.jar" excludes="META-INF/**" />

    <zipfileset src="${src.lib.dir}/RPlot.jar" excludes="META-INF/**"/>
    <zipfileset src="${src.lib.dir}/gzipfix.jar">
      <include name="com/rtg/util/gzip/WorkingGzipInputStream.class" />
    </zipfileset>
  </union>

  <target name="rtg-bare.jar" depends="compile-src,set-rtg-build-version" description="Create jar, no main-class or product name.">
    <jar destfile="${build.dir}/rtg-bare.jar" duplicate="fail">
      <resources refid="jar-src"/>
    </jar>
  </target>

  <target name="rtg-core.jar" depends="rtg-bare.jar,set-rtg-build-product" description="Core jar.">
    <jar destfile="${build.dir}/rtg-core.jar" duplicate="fail">
      <manifest>
        <attribute name="Main-Class" value="com.rtg.Slim"/>
        <attribute name="Implementation-Title" value="RTG"/>
        <attribute name="Implementation-Vendor" value="Real Time Genomics"/>
        <attribute name="Class-Path" value="."/>
      </manifest>
      <fileset dir="${build.misc}">
        <include name="com/rtg/product.name" />
      </fileset>
      <zipfileset src="${build.dir}/rtg-bare.jar"/>
    </jar>
  </target>

  <union id="jar-test">
    <resources refid="jar-src"/>
    <fileset dir="${build.test}">
      <include name="com/**/*.class"/>
    </fileset>
    <fileset dir="${test.dir}">
      <include name="com/**/*.txt"/>
      <include name="com/**/*.properties"/>
      <include name="com/rtg/**/resources/*"/>
      <include name="com/rtg/mode/BLOSUM*" />
      <include name="com/rtg/util/testFile"/>
      <include name="com/rtg/util/cli/spell.*"/>
    </fileset>
    <zipfileset src="${test.lib.dir}/spelling.jar"/>
    <zipfileset src="${test.lib.dir}/junit.jar" excludes="META-INF/**"/>
  </union>

  <target name="rtg-test-bare.jar" depends="compile,set-rtg-build-version" description="Create jar including tests, no main-class or product name.">
    <jar destfile="${build.dir}/rtg-test-bare.jar" duplicate="fail">
      <resources refid="jar-test"/>
    </jar>
  </target>

  <target name="ROC.jar" depends="compile-src" description="Make ROC applet jar.">
    <jar destfile="${build.dir}/ROC.jar" duplicate="fail">
      <manifest>
        <attribute name="Implementation-Title" value="RTG"/>
        <attribute name="Implementation-Vendor" value="Real Time Genomics"/>
        <attribute name="Class-Path" value="."/>
      </manifest>
      <fileset dir="${build.src}">
        <include name="com/rtg/util/*.class"/>
        <include name="com/rtg/util/io/**/*.class"/>
        <include name="com/rtg/util/gzip/**/*.class"/>
        <include name="com/rtg/util/diagnostic/**/*.class"/>
        <include name="com/rtg/graph/*.class"/>
        <include name="com/rtg/graph/**/*.png"/>
      </fileset>
      <fileset dir="${src.dir}">
        <include name="com/rtg/util/diagnostic/*.properties"/>
      </fileset>
      <zipfileset src="${src.lib.dir}/RPlot.jar" excludes="META-INF/**"/>
      <zipfileset src="${src.lib.dir}/gzipfix.jar">
        <include name="com/rtg/util/gzip/WorkingGzipInputStream.class" />
      </zipfileset>
    </jar>
  </target>

  <target name="javadoc" depends="compile-src" description="Build javadocs">
    <javadoc sourcepath="${src.dir}" destdir="${build.dir}/javadocs" source="1.7"
             Author="true" Version="true" Package="true" 
             useexternalfile="true" additionalparam="-quiet" docfilessubdirs="true">
      <tag name="has" enabled="false"/>
      <tag name="assoc" enabled="false"/>
      <tag name="depend" enabled="false"/>
      <tag name="composed" enabled="false"/>
      <tag name="minOccurs" enabled="false"/>
      <tag name="maxOccurs" enabled="false"/>
      <tag name="nillable" enabled="false"/>
      <tag name="nillableContainer" enabled="false"/>
      <tag name="minOccursContainer" enabled="false"/>
      <tag name="length" enabled="false"/>
      <tag name="minLength" enabled="false"/>
      <tag name="maxLength" enabled="false"/>
      <tag name="enumeration" enabled="false"/>
      <tag name="pattern" enabled="false"/>
      <tag name="minExclusive" enabled="false"/>
      <tag name="maxExclusive" enabled="false"/>
      <tag name="minInclusive" enabled="false"/>
      <tag name="maxInclusive" enabled="false"/>
        <classpath>
          <resources refid="runtime.libs" />
          <resources refid="compiletime.libs" />
        </classpath>
    </javadoc>
  </target>

  <scriptdef language="javascript" name="lowercase">
    <attribute name="value" />
    <attribute name="name" />
    project.setProperty(attributes.get("name"), attributes.get("value").toLowerCase());
  </scriptdef>

  <target name="zip-init" depends="rtg-vcs-info"> <!-- set up properties -->
    <property file="${src.dir}/com/rtg/util/Environment.properties" prefix="buildinfo" />
    <tstamp> <format property="build.tstamp" pattern="yyyyMMddHHmm" /></tstamp>
    <propertyregex property="almostproductfilename" input="${product}" regexp="\s+" global="true" replace="-" />
    <property name="almostproductfilename" value="${product}" />
    <lowercase name="productfilename" value="${almostproductfilename}" />
    <condition property="zipversion"
               value="${productfilename}"
               else="${productfilename}-${buildinfo.VERSION}-${rtg.vcs.commit.revision}">
      <istrue value="${release.build}"/>
    </condition>

    <property name="zipfile.base" location="${build.dir}/${zipversion}-base.zip" />
    <property name="zipfile.linux" location="${dist.dir}/${zipversion}-linux-x64.zip" />
    <property name="zipfile.windows" location="${dist.dir}/${zipversion}-windows-x64.zip" />
    <property name="zipfile.nojre" location="${dist.dir}/${zipversion}-nojre.zip" />
    <property name="zipfile" value="${zipfile.nojre}" /> <!-- Default when running smoketest -->
    <property name="rtg-jar-for-zip" value="rtg-${resources}.jar"/>
  </target>

  <target name="zip-jars">
    <antcall>
      <target name="${rtg-jar-for-zip}"/>
    </antcall>
  </target>

  <target name="zip-text">
    <!-- Default license, may override for a RTG Tools build -->
    <property name="license.location" location="${public.core.basedir}/LICENSE.txt"/>
    <copy todir="${build.text}">
      <resources id="zip.text">
        <file file="${public.core.basedir}/doc/README.txt"/>
        <file file="${public.core.basedir}/doc/ReleaseNotes.txt"/>
        <file file="${license.location}"/>
      </resources>
      <filterchain>
        <replaceregex pattern="RTG.VERSION" replace="${product}" />
        <fixcrlf eol="crlf" />
      </filterchain>
    </copy>
  </target>

  <zipfileset id="common-resources" dir="${public.core.basedir}/installer/resources/common" includes="**/*" />
  <zipfileset id="avr-resources" dir="${public.core.basedir}/installer/resources" includes="models/**/*" />

  <union id="core-resources">
    <zipfileset refid="common-resources" />
    <zipfileset refid="avr-resources" />
    <zipfileset dir="${public.core.basedir}/installer/resources/core" includes="**/*" />
  </union>

  <union id="tools-resources">
    <zipfileset refid="common-resources" />
    <zipfileset dir="${public.core.basedir}/installer/resources/tools" includes="**/*" />
  </union>

  <target name="zip-base" depends="zip-init,zip-jars,zip-text">
    <zip destfile="${zipfile.base}" duplicate="fail">
      <mappedresources>
        <union refid="${resources}-resources"/>
        <globmapper from="*" to="${zipversion}/*"/>
      </mappedresources>
      <zipfileset prefix="${zipversion}" dir="${build.text}" includes="*.txt" />
      <zipfileset fullpath="${zipversion}/RTG.jar" dir="${build.dir}" includes="${rtg-jar-for-zip}"/>
      <zipfileset fullpath="${zipversion}/third-party/gzipfix.jar" dir="${src.lib.dir}" includes="gzipfix.jar" />
    </zip>
  </target>

  <target name="zip-nojre" depends="zip-base" description="Create the distributable zip file without JRE.">
    <zip destfile="${zipfile.nojre}">
      <zipfileset src="${zipfile.base}"/>
      <zipfileset prefix="${zipversion}" dir="${public.core.basedir}/installer" includes="rtg" filemode="755"/>
      <zipfileset prefix="${zipversion}" dir="${public.core.basedir}/installer" includes="rtg.bat"/>
      <zipfileset prefix="${zipversion}" dir="${public.core.basedir}/lib">
        <include name="libZooma.so"/>
      </zipfileset>
    </zip>
  </target>

  <!--
     Targets that exist to make things bearable for developers running
     stuff from Windows command-line.
    -->

  <property name="run.args" value=""/>

  <target name="run" depends="compile-src" description="Run any class. -Drun.class=xxx -Drun.args=xxx">
    <java classname="${run.class}" fork="true">
      <arg line="${run.args}" />
      <classpath>
        <resources refid="runtime.classpath" />
      </classpath>
    </java>
  </target>

  <target name="runrtg" description="Run RTG. -Drun.args=xxx">
    <antcall target="run">
      <param name="run.class" value="com.rtg.Slim"/>
    </antcall>
  </target>

  <target name="runtest" depends="compile-src,compile-test" description="Run a test class. -Dtest.class=xxx">
    <fail unless="test.class" message="test.class property must be set"/>
    <java classname="junit.textui.TestRunner" fork="true" failonerror="true" dir="${build.junit}">
      <arg line="${test.class}" />
      <jvmarg value="-server" />
      <jvmarg value="-ea" />
      <jvmarg value="-Djava.library.path=${src.lib.dir}:${test.lib.dir}" />
      <jvmarg value="-Djava.awt.headless=true" />
      <jvmarg value="-Drtg.developer=true" />
      <jvmarg value="-Dregression.root=${test.dir}" />
      <jvmarg value="-Dregression.update=${regression.update}" />
      <jvmarg value="-javaagent:${tools.dir}/handlechecker.jar" />
      <classpath>
        <resources refid="runtime.test.classpath" />
      </classpath>
    </java>
  </target>

  <target name="runalltests" description="Run all tests">
    <antcall target="runtest">
      <param name="test.class" value="com.AllTests"/>
    </antcall>
  </target>

</project>
